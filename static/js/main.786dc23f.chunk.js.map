{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ConatctList.js","components/Filter/Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","submit","className","styles","wrapper","onSubmit","this","input","type","placeholder","onChange","button","React","Component","ContactItem","deleteFunction","contact","li","onClick","id","btn","ContactList","list","map","key","v4","Filter","filterChange","filterValue","App","contacts","filter","newContact","find","el","alert","prevState","handleDelete","persistedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filterContacts","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.786dc23f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactForm_wrapper__32pDr\",\"button\":\"ContactForm_button__h_jL8\",\"input\":\"ContactForm_input__3SWBT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactItem_li__1w53M\",\"btn\":\"ContactItem_btn__1qqqT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__j3Rs0\"};","import React from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nexport default class ContactForm extends React.Component {\r\n  state = {\r\n    name: \"\",\r\n    number:\"\"\r\n  }\r\n  static propTypes = {\r\n    submit: PropTypes.func.isRequired,\r\n  };\r\n    handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.submit(this.state);\r\n  }\r\n  render() {\r\n    return (\r\n      <form className={styles.wrapper} onSubmit={this.handleSubmit}>\r\n        <p>Name</p>\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          placeholder=\"Enter name\"\r\n          name=\"name\"\r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n        ></input>\r\n        <p>Number</p>\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          placeholder=\"Enter number\"\r\n          name=\"number\"\r\n          value={this.state.number}\r\n          onChange={this.handleChange}\r\n        ></input>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./ContactItem.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nfunction ContactItem({ deleteFunction, contact }) {\r\n  return (\r\n    <li className={styles.li}>\r\n      {contact.name}: {contact.number}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => deleteFunction(contact.id)}\r\n        className={styles.btn}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  deleteFunction: PropTypes.func.isRequired,\r\n  contact: PropTypes.object.isRequired\r\n}","import React from \"react\";\r\nimport ContactItem from \"../ContactItem/ContactItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport {v4} from 'uuid';\r\nexport default class ContactList extends React.Component {\r\n  static propTypes = {\r\n    deleteFunction: PropTypes.func.isRequired,\r\n  };\r\n  render() {\r\n    const { deleteFunction } = this.props;\r\n    return (\r\n      <div>\r\n        <ul>\r\n          {this.props.list.map((contact) => (\r\n            <ContactItem key={v4()} deleteFunction={deleteFunction} contact={contact} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nfunction Filter({ filterChange, filterValue }) {\r\n  return (\r\n    <input\r\n      className={styles.input}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={filterValue}\r\n      onChange={filterChange}\r\n    ></input>\r\n  );\r\n}\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  filterChange: PropTypes.func.isRequired,\r\n  filterValue: PropTypes.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport ContactList from \"./components/ContactList/ConatctList\";\r\nimport { v4 } from \"uuid\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nclass App extends React.Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n  };\r\n  componentDidMount() {\r\n    const persistedContacts = localStorage.getItem(\"contacts\");\r\n    if (persistedContacts) {\r\n      this.setState({\r\n        contacts: JSON.parse(persistedContacts)\r\n      })\r\n    }\r\n    \r\n  }\r\n  componentDidUpdate(prevProps,prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n        localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n  }\r\n  }\r\n    handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleSubmit = (contact) => {\r\n    let newContact = {\r\n      name: contact.name,\r\n      number: contact.number,\r\n      id: v4(),\r\n    };\r\n    if (\r\n      this.state.contacts.find(\r\n        (el) => el.name === newContact.name && el.number === newContact.number\r\n      )\r\n    ) {\r\n      alert(`${newContact.name} is already in your list`);\r\n    } else {\r\n      this.setState((prevState) => {\r\n        return {\r\n          contacts: [...prevState.contacts, newContact],\r\n        };\r\n      });\r\n    }\r\n  };\r\n  handleDelete = (id) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: prevState.contacts.filter((contact) => {\r\n          if (contact.id === id) {\r\n            return false;\r\n          } else {\r\n            return true;\r\n          }\r\n        }),\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {contacts,filter } = this.state;\r\n    const filterContacts = contacts.filter((el) => el.name.includes(filter));\r\n\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm submit={this.handleSubmit} />\r\n        <h2>Contacts</h2>\r\n        <h4>Find contacts by name</h4>\r\n        <Filter filterChange={this.handleChange} filterValue={filter} />\r\n        <ContactList\r\n          deleteFunction={this.handleDelete}\r\n          list={filterContacts}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}